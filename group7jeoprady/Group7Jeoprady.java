/*
Jacob Lin, David Duan, Brian Morava
13/1/2021
Jeoprady game using JFrame (GUI)
Uses a 4 by 4 Grid of buttons where each button corresponds to a Jeoprady question. A highscore system has also been implemented where the player with 
the best score out of any game is listed on the end screen (a data file is used for this). This program also makes uses of multiple methods, particularly
to determine if a player's answer is correct, if a win condition has been met, and to assign each button a column and row index in the 4 by 4 question 
grid as well as a randomly generated Jeopardy question.
Source of Questions: https://www.funtrivia.com/trivia/SciTech/General-Computing-5521_4.html
https://jeopardylabs.com/play/music-questions-16
https://jeopardyquestions.com/category/world-history
https://jeopardylabs.com/play/sports-3392
 */
package group7jeoprady;
//import all packages needed

import java.awt.event.KeyEvent;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import java.util.ArrayList;

/**
 *
 * @author Jacob
 */
public class Group7Jeoprady extends javax.swing.JFrame {

    //Variable declaration and initialization
    String[][][] arrQuestion = new String[4][4][2];//create 2 3-d array to store questions/answers
    String[][][] arrAnswer = new String[4][4][2];
    int[] arrRandom = new int[16];//array to assign random 0/1

    int counter = 0;
    String question, userAnswer;
    int questionRow, questionColumn, player = (int) (Math.random() * 2) + 1, player1Score = 0, player2Score = 0;
    boolean answeredTwice;
    int hScore = 0;
    String hScoreName = "";

    ArrayList<Integer> arrC = new ArrayList<Integer>();
    ArrayList<Integer> arrR = new ArrayList<Integer>();
    //An array of the questions which are buttons 
    JButton[][] theQuestionButtons = new JButton[4][4];

    /**
     * Creates new form Group7Jeoprady
     */
    public Group7Jeoprady() {
        initComponents();

        //Computers
        theQuestionButtons[0][0] = btnC1;
        theQuestionButtons[0][1] = btnC2;
        theQuestionButtons[0][2] = btnC3;
        theQuestionButtons[0][3] = btnC4;

        //Music
        theQuestionButtons[1][0] = btnM1;
        theQuestionButtons[1][1] = btnM2;
        theQuestionButtons[1][2] = btnM3;
        theQuestionButtons[1][3] = btnM4;

        //History
        theQuestionButtons[2][0] = btnH1;
        theQuestionButtons[2][1] = btnH2;
        theQuestionButtons[2][2] = btnH3;
        theQuestionButtons[2][3] = btnH4;

        //Sports
        theQuestionButtons[3][0] = btnS1;
        theQuestionButtons[3][1] = btnS2;
        theQuestionButtons[3][2] = btnS3;
        theQuestionButtons[3][3] = btnS4;
        

        //play music
        try {
            File musicPath = new File("src\\group7jeoprady\\song.wav");//load music file
            AudioInputStream audioInput = AudioSystem.getAudioInputStream(musicPath);//create audio stream
            Clip clip = AudioSystem.getClip();//get clip from audio stream
            clip.open(audioInput);//open the stream
            clip.start();//start the music 
            clip.loop(Clip.LOOP_CONTINUOUSLY);//loop the music until file is closing
            
        } catch (Exception ex) {
            ex.printStackTrace();//output error if file not found
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        defaultPanel = new javax.swing.JPanel();
        lblTital = new javax.swing.JLabel();
        gamePanel = new javax.swing.JPanel();
        startPanel = new javax.swing.JPanel();
        coverPicture = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        boardPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblP2Money = new javax.swing.JLabel();
        lblP1Money = new javax.swing.JLabel();
        btnC1 = new javax.swing.JButton();
        btnC2 = new javax.swing.JButton();
        btnC3 = new javax.swing.JButton();
        btnC4 = new javax.swing.JButton();
        btnM1 = new javax.swing.JButton();
        btnM2 = new javax.swing.JButton();
        btnM3 = new javax.swing.JButton();
        btnM4 = new javax.swing.JButton();
        btnH1 = new javax.swing.JButton();
        btnH2 = new javax.swing.JButton();
        btnH3 = new javax.swing.JButton();
        btnH4 = new javax.swing.JButton();
        btnS1 = new javax.swing.JButton();
        btnS2 = new javax.swing.JButton();
        btnS3 = new javax.swing.JButton();
        btnS4 = new javax.swing.JButton();
        lblQuestion = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtUserAnswer = new javax.swing.JTextField();
        btnEnter = new javax.swing.JButton();
        btnEndGame = new javax.swing.JButton();
        lblCurrentPlayer = new javax.swing.JLabel();
        btnRestart = new javax.swing.JButton();
        gameOverPanel = new javax.swing.JPanel();
        lblGameOver = new javax.swing.JLabel();
        lblWinner = new javax.swing.JLabel();
        lblCredits = new javax.swing.JLabel();
        lblHighScore = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnRestart1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        defaultPanel.setBackground(new java.awt.Color(0, 0, 0));

        lblTital.setBackground(new java.awt.Color(0, 0, 204));
        lblTital.setFont(new java.awt.Font("BankGothic Lt BT", 3, 50)); // NOI18N
        lblTital.setForeground(new java.awt.Color(255, 255, 0));
        lblTital.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTital.setText("JEOPARDY!");

        gamePanel.setLayout(new java.awt.CardLayout());

        startPanel.setBackground(new java.awt.Color(0, 0, 0));

        coverPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/group7jeoprady/66LUJA7EKIYKB4CPEWV5YK2QBU.jpg"))); // NOI18N

        btnStart.setBackground(new java.awt.Color(51, 51, 255));
        btnStart.setFont(new java.awt.Font("Dialog", 3, 36)); // NOI18N
        btnStart.setForeground(new java.awt.Color(255, 255, 0));
        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout startPanelLayout = new javax.swing.GroupLayout(startPanel);
        startPanel.setLayout(startPanelLayout);
        startPanelLayout.setHorizontalGroup(
            startPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, startPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(startPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(coverPicture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        startPanelLayout.setVerticalGroup(
            startPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, startPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(coverPicture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        gamePanel.add(startPanel, "card2");

        jPanel1.setFocusable(true);
        jPanel1.requestFocusInWindow();
        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 0));
        jLabel1.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 0));
        jLabel1.setText("Computers");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 0));
        jLabel3.setText("Music");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 0));
        jLabel2.setText("History");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 0));
        jLabel4.setText("Sports");

        lblP2Money.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        lblP2Money.setForeground(new java.awt.Color(0, 0, 255));
        lblP2Money.setText("P2: $0");

        lblP1Money.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        lblP1Money.setForeground(new java.awt.Color(255, 0, 0));
        lblP1Money.setText("P1: $0");

        btnC1.setBackground(new java.awt.Color(51, 51, 255));
        btnC1.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnC1.setForeground(new java.awt.Color(255, 255, 0));
        btnC1.setText("$100");
        btnC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnC1ActionPerformed(evt);
            }
        });

        btnC2.setBackground(new java.awt.Color(51, 51, 255));
        btnC2.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnC2.setForeground(new java.awt.Color(255, 255, 0));
        btnC2.setText("$200");
        btnC2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnC2ActionPerformed(evt);
            }
        });

        btnC3.setBackground(new java.awt.Color(51, 51, 255));
        btnC3.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnC3.setForeground(new java.awt.Color(255, 255, 0));
        btnC3.setText("$300");
        btnC3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnC3ActionPerformed(evt);
            }
        });

        btnC4.setBackground(new java.awt.Color(51, 51, 255));
        btnC4.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnC4.setForeground(new java.awt.Color(255, 255, 0));
        btnC4.setText("$400");
        btnC4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnC4ActionPerformed(evt);
            }
        });

        btnM1.setBackground(new java.awt.Color(51, 51, 255));
        btnM1.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnM1.setForeground(new java.awt.Color(255, 255, 0));
        btnM1.setText("$100");
        btnM1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnM1ActionPerformed(evt);
            }
        });

        btnM2.setBackground(new java.awt.Color(51, 51, 255));
        btnM2.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnM2.setForeground(new java.awt.Color(255, 255, 0));
        btnM2.setText("$200");
        btnM2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnM2ActionPerformed(evt);
            }
        });

        btnM3.setBackground(new java.awt.Color(51, 51, 255));
        btnM3.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnM3.setForeground(new java.awt.Color(255, 255, 0));
        btnM3.setText("$300");
        btnM3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnM3ActionPerformed(evt);
            }
        });

        btnM4.setBackground(new java.awt.Color(51, 51, 255));
        btnM4.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnM4.setForeground(new java.awt.Color(255, 255, 0));
        btnM4.setText("$400");
        btnM4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnM4ActionPerformed(evt);
            }
        });

        btnH1.setBackground(new java.awt.Color(51, 51, 255));
        btnH1.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnH1.setForeground(new java.awt.Color(255, 255, 0));
        btnH1.setText("$100");
        btnH1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnH1ActionPerformed(evt);
            }
        });

        btnH2.setBackground(new java.awt.Color(51, 51, 255));
        btnH2.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnH2.setForeground(new java.awt.Color(255, 255, 0));
        btnH2.setText("$200");
        btnH2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnH2ActionPerformed(evt);
            }
        });

        btnH3.setBackground(new java.awt.Color(51, 51, 255));
        btnH3.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnH3.setForeground(new java.awt.Color(255, 255, 0));
        btnH3.setText("$300");
        btnH3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnH3ActionPerformed(evt);
            }
        });

        btnH4.setBackground(new java.awt.Color(51, 51, 255));
        btnH4.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnH4.setForeground(new java.awt.Color(255, 255, 0));
        btnH4.setText("$400");
        btnH4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnH4ActionPerformed(evt);
            }
        });

        btnS1.setBackground(new java.awt.Color(51, 51, 255));
        btnS1.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnS1.setForeground(new java.awt.Color(255, 255, 0));
        btnS1.setText("$100");
        btnS1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnS1ActionPerformed(evt);
            }
        });

        btnS2.setBackground(new java.awt.Color(51, 51, 255));
        btnS2.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnS2.setForeground(new java.awt.Color(255, 255, 0));
        btnS2.setText("$200");
        btnS2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnS2ActionPerformed(evt);
            }
        });

        btnS3.setBackground(new java.awt.Color(51, 51, 255));
        btnS3.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnS3.setForeground(new java.awt.Color(255, 255, 0));
        btnS3.setText("$300");
        btnS3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnS3ActionPerformed(evt);
            }
        });

        btnS4.setBackground(new java.awt.Color(51, 51, 255));
        btnS4.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        btnS4.setForeground(new java.awt.Color(255, 255, 0));
        btnS4.setText("$400");
        btnS4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnS4ActionPerformed(evt);
            }
        });

        lblQuestion.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblQuestion.setForeground(new java.awt.Color(255, 255, 0));
        lblQuestion.setText("Question Selected:");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 0));
        jLabel5.setText("What is: ");

        txtUserAnswer.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        txtUserAnswer.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtUserAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserAnswerActionPerformed(evt);
            }
        });
        txtUserAnswer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUserAnswerKeyPressed(evt);
            }
        });

        btnEnter.setBackground(new java.awt.Color(0, 0, 255));
        btnEnter.setFont(new java.awt.Font("Dialog", 3, 24)); // NOI18N
        btnEnter.setForeground(new java.awt.Color(255, 255, 0));
        btnEnter.setText("Enter");
        btnEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnterActionPerformed(evt);
            }
        });
        btnEnter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnEnterKeyPressed(evt);
            }
        });

        btnEndGame.setBackground(new java.awt.Color(0, 0, 255));
        btnEndGame.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        btnEndGame.setForeground(new java.awt.Color(255, 255, 0));
        btnEndGame.setText("End Game");
        btnEndGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEndGameActionPerformed(evt);
            }
        });

        lblCurrentPlayer.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        lblCurrentPlayer.setForeground(new java.awt.Color(255, 255, 0));
        lblCurrentPlayer.setText("PlayerLabel");

        btnRestart.setBackground(new java.awt.Color(0, 0, 255));
        btnRestart.setFont(new java.awt.Font("Dialog", 3, 24)); // NOI18N
        btnRestart.setForeground(new java.awt.Color(255, 255, 51));
        btnRestart.setText("Restart");
        btnRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCurrentPlayer)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblP1Money)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblP2Money))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnC1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnC2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnC3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnC4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(85, 85, 85)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnM1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnM2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnM3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnM4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(85, 85, 85)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnH1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnH2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnH3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnH4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(85, 85, 85)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnS1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnS2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnS3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnS4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 122, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtUserAnswer))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnEndGame)
                                .addGap(313, 313, 313)
                                .addComponent(btnRestart)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnEnter)))
                        .addGap(8, 8, 8)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblP2Money, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblP1Money, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnM1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnC1)
                        .addComponent(btnH1)
                        .addComponent(btnS1)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnM2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnC2)
                        .addComponent(btnH2)
                        .addComponent(btnS2)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnC3)
                    .addComponent(btnM3)
                    .addComponent(btnH3)
                    .addComponent(btnS3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnC4)
                    .addComponent(btnM4)
                    .addComponent(btnH4)
                    .addComponent(btnS4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCurrentPlayer))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEndGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRestart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(113, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout boardPanelLayout = new javax.swing.GroupLayout(boardPanel);
        boardPanel.setLayout(boardPanelLayout);
        boardPanelLayout.setHorizontalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        boardPanelLayout.setVerticalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        gamePanel.add(boardPanel, "card3");

        gameOverPanel.setBackground(new java.awt.Color(0, 0, 0));

        lblGameOver.setFont(new java.awt.Font("Dialog", 3, 48)); // NOI18N
        lblGameOver.setForeground(new java.awt.Color(255, 255, 0));
        lblGameOver.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGameOver.setText("GAME OVER");

        lblWinner.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        lblWinner.setForeground(new java.awt.Color(0, 51, 255));
        lblWinner.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblWinner.setText("WinnerLabel");
        lblWinner.setToolTipText("");

        lblCredits.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        lblCredits.setForeground(new java.awt.Color(255, 255, 0));
        lblCredits.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCredits.setText("ReferencesLabel");

        lblHighScore.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        lblHighScore.setForeground(new java.awt.Color(255, 0, 0));
        lblHighScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/group7jeoprady/r5xlqz_large.png"))); // NOI18N

        btnRestart1.setBackground(new java.awt.Color(0, 0, 255));
        btnRestart1.setFont(new java.awt.Font("Dialog", 3, 24)); // NOI18N
        btnRestart1.setForeground(new java.awt.Color(255, 255, 51));
        btnRestart1.setText("Restart");
        btnRestart1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestart1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gameOverPanelLayout = new javax.swing.GroupLayout(gameOverPanel);
        gameOverPanel.setLayout(gameOverPanelLayout);
        gameOverPanelLayout.setHorizontalGroup(
            gameOverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameOverPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gameOverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRestart1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblWinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblGameOver, javax.swing.GroupLayout.DEFAULT_SIZE, 1032, Short.MAX_VALUE)
                    .addComponent(lblHighScore, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(gameOverPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblCredits, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76)))
                .addContainerGap())
        );
        gameOverPanelLayout.setVerticalGroup(
            gameOverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameOverPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblGameOver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblWinner)
                .addGroup(gameOverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gameOverPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addGroup(gameOverPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(lblCredits, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(btnRestart1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblHighScore, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
        );

        gamePanel.add(gameOverPanel, "card4");

        javax.swing.GroupLayout defaultPanelLayout = new javax.swing.GroupLayout(defaultPanel);
        defaultPanel.setLayout(defaultPanelLayout);
        defaultPanelLayout.setHorizontalGroup(
            defaultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(defaultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(defaultPanelLayout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(lblTital, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(170, 170, 170)))
                .addContainerGap())
        );
        defaultPanelLayout.setVerticalGroup(
            defaultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTital, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(defaultPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method To read from file and import the questions/answers from it, as well as
     * creating arrRandom which creates the randomness of the questions
     */
    public void dataReader() {
        
        for (int i = 0; i < 16; i++) {//while the array is not all assigned
            if (Math.random() >= 0.5) {// 50/50 chance to get either 0 or 1
                arrRandom[i] = 1;
            } else {
                arrRandom[i] = 0;
            }
        }
        
        boolean endOfFile = false;//while there are more to read
        
        String nl = "", nl2 = "", nl3 = "", nl4 = "";//variable declaration and initialization
        
        int col = 0, row = 0;
        
        try {
            
            FileReader fr = new FileReader("src\\Group7Jeoprady\\data.txt");//create a new filereader
            BufferedReader br = new BufferedReader(fr);//create new buffered reader
            
            while (!endOfFile) {//while there are more to read
                
                nl = br.readLine();//read next line
                
                if (nl == null) {//if it empty, stop reading
                    
                    endOfFile = true;
                } else {
                    
                    nl2 = br.readLine();//read the next few lines
                    nl3 = br.readLine();
                    nl4 = br.readLine();
                    
                    if (row == 3) {//if it is the end of a category, use col++ to go to the next subarray
                        
                        arrQuestion[col][row][0] = nl;//assign them into the 2 arrays
                        arrQuestion[col][row][1] = nl3;
                        arrAnswer[col][row][0] = nl2;
                        arrAnswer[col][row][1] = nl4;
                        row = 0;
                        counter++;
                        col++;
                        
                    } else {
                        
                        arrQuestion[col][row][0] = nl;//assign them into the 2 arrays
                        arrQuestion[col][row][1] = nl3;
                        arrAnswer[col][row][0] = nl2;
                        arrAnswer[col][row][1] = nl4;
                        counter++;
                        row++;
                    }
                }
            }
            
            br.close();//close buffered reader
        } catch (IOException e) {
            System.out.println("error: " + e);//print error if file not found
        }
    }

    /**
     * Read from the score file and compare it with high score,write to file if
     * the player got a new high score
     *
     * @param score: high score for the game
     * @param name: name of the player with the high score
     * @return 1 if new high score, 0 if not. -1 if file not found
     */
    public int highScore(int score, String name) {
        try {

            FileReader fr = new FileReader("src\\group7jeoprady\\score");//load file
            BufferedReader br = new BufferedReader(fr); //load buffered reader
            
            hScoreName = br.readLine();//read lines
            
            String sCurrentScore = br.readLine();
            
            int currentScore = Integer.parseInt(sCurrentScore);//parse int
            
            if (score >= currentScore) {//if new high score
                
                FileWriter fw = new FileWriter("src\\group7jeoprady\\score");//write to file
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write(name + "\n");//write the name and new high score
                bw.write(score + "");
                bw.close();//close the file
                return 1;
                
            } else {
                
                hScore = currentScore;//assign current score to the global variable high score
                br.close();
                return 0;
            }
        } catch (IOException e) {//if file not found print error
            System.out.println("error: " + e);
            return -1;
        }

    }

    /**
     * Method that checks if players answer is correct
     *
     * @return boolean true or false if answer is correct or not
     */
    public boolean checkAnswer() {
        String correctAnswer = arrAnswer[questionColumn][questionRow][arrRandom[questionColumn * 4 + questionRow]]; // get the answer from the arrAnswer array
        return userAnswer.equalsIgnoreCase(correctAnswer);//return true/false
    }

    /**
     * Changes the boardJpanel to gameover Jpanel, this methods sets up everything that is
     * needed for the win screen(game over screen)
     */
    public void winScreen() {
        
        lblCredits.setText("<html><br>Jeoprady Questions Found From:<br/>https://www.funtrivia.com/trivia/SciTech/General-Computing-5521_4.html<br/>"
                + "https://jeopardylabs.com/play/music-questions-16<br/>"
                + "https://jeopardyquestions.com/category/world-history<br/>"
                + "https://jeopardylabs.com/play/sports-3392</html>");//show/give credit to where we got our questions from
        
        //code to change between panels
        gamePanel.removeAll();
        gamePanel.add(gameOverPanel);//add the approporiate panel
        gamePanel.repaint();
        gamePanel.revalidate();
        
        if (player1Score > player2Score) {//if player1 wins
            
            if (player1Score < 0) {//no negative scores
                player1Score = 0;
            }
            
            lblWinner.setForeground(Color.RED);//set the winner label to red
            lblWinner.setText("<html><br>PLAYER 1 IS THE WINNER!<br/> CASH PRIZE: $" + player1Score + "</html>");//set screen to player1 win screen
            String newHighScoreName = JOptionPane.showInputDialog(null, "Player 1, please enter your name:");//ask for player1 name
            if (highScore(player1Score, newHighScoreName) == 1) {//use the highScore function, which returns 1 if new highscore, and writes to file
                
                lblHighScore.setText(newHighScoreName + "'s NEW HIGH SCORE: $" + " " + player1Score);
            } else {
                lblHighScore.setText(newHighScoreName + "'s score: $" + player1Score + "    " + hScoreName + "'s high score: $" + hScore);
            }
            
        } else if (player2Score > player1Score) {//same thing except player2 wins.
            
            if (player2Score < 0) {
                player2Score = 0;
            }
            
            lblWinner.setForeground(Color.BLUE);//set the winner label to blue
            lblWinner.setText("<html><br>PLAYER 2 IS THE WINNER!<br/> CASH PRIZE: $" + player2Score + "</html>");//set screen to player1 win screen
            String newHighScoreName = JOptionPane.showInputDialog(null, "Player 2, please enter your name:");//ask for player2 name
            
            if (highScore(player2Score, newHighScoreName) == 1) {//use the highScore function, which returns 1 if new highscore, and writes to file
                lblHighScore.setText(newHighScoreName + "'s NEW HIGH SCORE: $" + player2Score);
            } else {
                lblHighScore.setText(newHighScoreName + "'s score: $" + player2Score + "    " + hScoreName + "'s high score: $" + hScore);
            }
            
        } else {//if they are tied, we ask for both players' name
            
            if (player1Score < 0) {
                player1Score = 0;
            }
            if (player2Score < 0) {
                player2Score = 0;
            }

            lblWinner.setForeground(Color.YELLOW);//set the winner label to yellow
            lblWinner.setText("YOU TIED, EACH PLAYER WINS $" + player1Score + " DOLLARS!");//show text
            String newHighScoreName = JOptionPane.showInputDialog(null, "Player1, please enter your name:");//ask for player1 name
            String newHighScoreName2 = JOptionPane.showInputDialog(null, "Player2, please enter your name:");//ask for player2 name
            
            if (player == 1) {
                
                if (highScore(player1Score, newHighScoreName) == 1) {//if a new highscore is created, we tell the program to write down whoever went last.
                    lblHighScore.setText(newHighScoreName + "'s score: $" + player1Score + "    " + newHighScoreName2 + "'s score: $" + player2Score + "    " + "NEW HIGH SCORE: $" + player1Score);
                } else {//otherwise, show both players' score as well as the high score
                    lblHighScore.setText(newHighScoreName + "'s score: $" + player1Score + "    " + newHighScoreName2 + "'s score: $" + player2Score + "    " + hScoreName + "'s high score: $" + hScore);
                }
            } else {
                
                if (highScore(player1Score, newHighScoreName2) == 1) {//if a new highscore is created, we tell the program to write down whoever went last.
                    lblHighScore.setText(newHighScoreName + "'s score: $" + player1Score + "    " + newHighScoreName2 + "'s score: $" + player2Score + "    " + "NEW HIGH SCORE: $" + player1Score);
                } else {//otherwise, show both players' score as well as the high score
                    lblHighScore.setText(newHighScoreName + "'s score: $" + player1Score + "       " + newHighScoreName2 + "'s score: $" + player2Score + "    " + hScoreName + "'s high score: $" + hScore);
                }
            }

        }

    }

    /**
     * Method to make the program more modular, this method takes care of each button
     * press made by the user
     *
     * @param col: the column that the button is in
     * @param row: the row that the button is in
     * @param random: the index of the button in arrRandom
     */
    public void btnAction(int col, int row, int random) {
        
        answeredTwice = false;//if a question is answered twice(if 1 player answered it wrong)
        txtUserAnswer.setEnabled(true);
        txtUserAnswer.setText("");
        
        question = arrQuestion[col][row][arrRandom[random]];//get the question from the array
        questionColumn = col;
        questionRow = row;
        
        lblQuestion.setText("Question Selected: " + question + "?");//set the text onto the jlabel
        
        btnEnter.setEnabled(true);//make user able to press enter
        btnEnter.setBackground(Color.BLUE);//set btn enter to specific color
        btnEnter.setForeground(Color.YELLOW);
        
        txtUserAnswer.requestFocus();//focus on the txtUserAnswer textfield
    }

    /**
     * Method that restarts the game Set score to 0 and choose a new set of
     * questions
     */
    public void restart() {
        // TODO add your handling code here:
        
        //code to change between panels
        gamePanel.removeAll();
        gamePanel.add(startPanel);
        gamePanel.repaint();
        gamePanel.revalidate();
        
        //Clear array list that stores stores amount of questions answered
        arrC.clear();
        arrR.clear();
        
        //Resetting the two players' scores 
        player1Score = 0;
        player2Score = 0;
        lblP1Money.setText("P1: $" + player1Score);
        lblP2Money.setText("P1: $" + player2Score);

        //Use of a loop to reset the button states 
        for (int col = 0; col < 4; col++) {
            for (int row = 0; row < 4; row++) {
                theQuestionButtons[col][row].setEnabled(true);
            }
        }
        lblQuestion.setText("Question Selected:");
        //Clear answer box
        txtUserAnswer.setText("");
    }

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        
        btnEnter.setEnabled(false);//enter is set to false to prevent error
        btnEnter.setForeground(Color.BLUE);
        dataReader();
        
        //code to change between panels
        gamePanel.removeAll();
        gamePanel.add(boardPanel);
        gamePanel.repaint();
        gamePanel.revalidate();

        if (player == 1) {//display whose turn it is
            lblCurrentPlayer.setForeground(Color.RED);
        } else {
            lblCurrentPlayer.setForeground(Color.BLUE);
        }
        lblCurrentPlayer.setText("Player" + player + "'s turn");
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestartActionPerformed
        // TODO add your handling code here:
        restart();
    }//GEN-LAST:event_btnRestartActionPerformed
   
    //Each button will run teh btnAction Method
    //The program passes the parameters for the location of the 
    //button pressed and the index if the random array of questions
    private void btnC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnC1ActionPerformed
        btnAction(0, 0, 0);
    }//GEN-LAST:event_btnC1ActionPerformed

    private void btnC2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnC2ActionPerformed
        btnAction(0, 1, 1);
    }//GEN-LAST:event_btnC2ActionPerformed

    private void btnC3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnC3ActionPerformed
        btnAction(0, 2, 2);
    }//GEN-LAST:event_btnC3ActionPerformed

    private void btnC4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnC4ActionPerformed
        btnAction(0, 3, 3);
    }//GEN-LAST:event_btnC4ActionPerformed

    private void btnM2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnM2ActionPerformed
        btnAction(1, 1, 5);
    }//GEN-LAST:event_btnM2ActionPerformed

    private void btnM1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnM1ActionPerformed
        btnAction(1, 0, 4);
    }//GEN-LAST:event_btnM1ActionPerformed

    private void btnM3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnM3ActionPerformed
        btnAction(1, 2, 6);
    }//GEN-LAST:event_btnM3ActionPerformed

    private void btnM4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnM4ActionPerformed
        btnAction(1, 3, 7);
    }//GEN-LAST:event_btnM4ActionPerformed

    private void btnH1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnH1ActionPerformed
        btnAction(2, 0, 8);
    }//GEN-LAST:event_btnH1ActionPerformed

    private void btnH2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnH2ActionPerformed
        btnAction(2, 1, 9);
    }//GEN-LAST:event_btnH2ActionPerformed

    private void btnH3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnH3ActionPerformed
        btnAction(2, 2, 10);
    }//GEN-LAST:event_btnH3ActionPerformed

    private void btnH4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnH4ActionPerformed
        btnAction(2, 3, 11);
    }//GEN-LAST:event_btnH4ActionPerformed

    private void btnS1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnS1ActionPerformed
        btnAction(3, 0, 12);
    }//GEN-LAST:event_btnS1ActionPerformed

    private void btnS2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnS2ActionPerformed
        btnAction(3, 1, 13);
    }//GEN-LAST:event_btnS2ActionPerformed

    private void btnS3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnS3ActionPerformed
        btnAction(3, 2, 14);
    }//GEN-LAST:event_btnS3ActionPerformed

    private void btnS4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnS4ActionPerformed
        btnAction(3, 3, 15);
    }//GEN-LAST:event_btnS4ActionPerformed

    private void txtUserAnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserAnswerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserAnswerActionPerformed

    private void btnEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnterActionPerformed
        
        btnEnter.setEnabled(false);//disable the button when it is pressed to prevent error
        btnEnter.setForeground(Color.BLUE);
        String steal;
        userAnswer = txtUserAnswer.getText();//get the user input 
        lblQuestion.setText("Question Selected:");
        txtUserAnswer.setText("");
       
        if (checkAnswer()) {//check if answer is correct using the checkAnswer method
            
            if (player == 1) {//to whoever the question belongs to
                
                txtUserAnswer.setText("That's correct! You just won $" + (questionRow + 1) * 100 + " dollars!");//tell user they are corect
                txtUserAnswer.setEnabled(false);
                player1Score += (questionRow + 1) * 100;//add points to the point track
                lblP1Money.setText("P1: $" + player1Score);//update the scoreboard
                player = 2;
                
            } else {//same for player2
                
                txtUserAnswer.setText("That's correct! You just won $" + (questionRow + 1) * 100 + " dollars!");//tell user they are corect
                player2Score += (questionRow + 1) * 100;//add points to the point track
                txtUserAnswer.setEnabled(false);
                lblP2Money.setText("P2: $" + player2Score);//update the scoreboard
                player = 1;

            }
            
            //add to the array list the index of the question that 
            //has been answered so we can disable it
            arrC.add(questionColumn);
            arrR.add(questionRow);
            
            theQuestionButtons[questionColumn][questionRow].setEnabled(false);//disable that question so users cant choose it again
            
        } else {
            
            txtUserAnswer.setText("Sorry that's the incorrect answer. You lost $" + (questionRow + 1) * 100 + " dollars.");//tell user that their answer is incorrect  
            
            if (player == 1) {
                
                player1Score -= (questionRow + 1) * 100;//beacuse the user got the wrong answer, the amount the point the question's worth is deducted from the user
                lblP1Money.setText("P1: $" + player1Score);//udpate scoreboard
                player = 2;//next player
                
                if (!answeredTwice) {
                    
                    steal = JOptionPane.showInputDialog("Player: " + player + " would you like to steal this question?(If you enter no the question will"//ask whether the other user wants to steal
                            + " disappear)");
                    
                    if (steal != null && steal.equalsIgnoreCase("yes")) {//if yes, repeat the process above, except that the answeredTwice variable will be set to true.
                        
                        answeredTwice = true;//set to true beacuse we only want a question to get answered twice
                        lblQuestion.setText("Question Selected: " + question + "?");//set label
                        txtUserAnswer.setText("");
                        btnEnter.setEnabled(true);//enable enter buton
                        btnEnter.setBackground(Color.BLUE);//set enter button color
                        btnEnter.setForeground(Color.YELLOW);
                        
                        for (int i = 0; i < 4; i++) {
                            for (int j = 0; j < 4; j++) {
                                theQuestionButtons[i][j].setEnabled(false);
                            }
                        }
                        
                    } else {//disable the question if the other player doesn't want to steal
                        
                        theQuestionButtons[questionColumn][questionRow].setEnabled(false);
                        txtUserAnswer.setEnabled(false);
                        txtUserAnswer.setText("");
                        
                        //add to the array list the index of the question that 
                        //has been answered so we can disable it
                        arrC.add(questionColumn);
                        arrR.add(questionRow);
                    }
                    
                } else {
                    
                    theQuestionButtons[questionColumn][questionRow].setEnabled(false);//disable the button if the question is answered twice
                    txtUserAnswer.setEnabled(false);
                    
                    //add to the array list the index of the question that 
                    //has been answered so we can disable it
                    arrC.add(questionColumn);
                    arrR.add(questionRow);
                    
                    //enables all buttons
                    for (int i = 0; i < 4; i++) {
                        for (int j = 0; j < 4; j++) {
                            theQuestionButtons[i][j].setEnabled(true);
                        }
                    }
                    
                    //goes through array list and disables buttons that have
                    //been answered so user can't click on it again.
                    for (int i = 0; i < arrC.size(); i++) {
                        theQuestionButtons[arrC.get(i)][arrR.get(i)].setEnabled(false);
                    }
                }
                
            } else {//same for player2
                
                player2Score -= (questionRow + 1) * 100;//beacuse the user got the wrong answer, the amount the point the question's worth is deducted from the user
                lblP2Money.setText("P2: $" + player2Score);//udpate scoreboard
                player = 1;//next player
                
                if (!answeredTwice) {
                    steal = JOptionPane.showInputDialog("Player: " + player + " would you like to steal this question?(If you enter no the question will"
                            + " disappear)");
                    
                    if (steal != null && steal.equalsIgnoreCase("yes")) {
                        
                        answeredTwice = true;
                        lblQuestion.setText("Question Selected: " + question + "?");
                        txtUserAnswer.setText("");
                        btnEnter.setEnabled(true);//enable enter buton
                        btnEnter.setBackground(Color.BLUE);//set enter button color
                        btnEnter.setForeground(Color.YELLOW);
                        
                        for (int i = 0; i < 4; i++) {
                            for (int j = 0; j < 4; j++) {
                                theQuestionButtons[i][j].setEnabled(false);
                            }
                        }
                        
                    } else {//disable the question if the other player doesn't want to steal
                        
                        theQuestionButtons[questionColumn][questionRow].setEnabled(false);
                        txtUserAnswer.setText("");
                        txtUserAnswer.setEnabled(false);
                        
                        //add to the array list the index of the question that 
                        //has been answered so we can disable it
                        arrC.add(questionColumn);
                        arrR.add(questionRow);
                    }
                } else {
                    
                    theQuestionButtons[questionColumn][questionRow].setEnabled(false);//disable the button if the question is answered twice
                    txtUserAnswer.setEnabled(false);
                    
                    //add to the array list the index of the question that 
                    //has been answered so we can disable it
                    arrC.add(questionColumn);                  
                    arrR.add(questionRow);
                    
                    //Enable every button on the quesion grid
                    for (int i = 0; i < 4; i++) {
                        for (int j = 0; j < 4; j++) {
                            theQuestionButtons[i][j].setEnabled(true);
                        }
                    }
                    
                    //Disables questions already answered
                    for (int i = 0; i < arrC.size(); i++) {
                        theQuestionButtons[arrC.get(i)][arrR.get(i)].setEnabled(false);
                    }
                }
            }
        }
        
        //use the arrC to check if 16 questions have been answered
        //If yes move to win screen
        if (arrC.size() == 16) {
            winScreen();
        }
        
        if (player == 1) {//set the color of the label based on the player
            lblCurrentPlayer.setForeground(Color.RED);
        } else {
            lblCurrentPlayer.setForeground(Color.BLUE);
        }
        
        lblCurrentPlayer.setText("Player" + player + "'s turn");//show whose turn it is
        System.out.println(arrC.size());
    }//GEN-LAST:event_btnEnterActionPerformed

    private void btnEndGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEndGameActionPerformed
        winScreen();
    }//GEN-LAST:event_btnEndGameActionPerformed

    private void btnRestart1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestart1ActionPerformed
        // TODO add your handling code here:
        restart();
    }//GEN-LAST:event_btnRestart1ActionPerformed

    private void btnEnterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnEnterKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnEnterKeyPressed

    private void txtUserAnswerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserAnswerKeyPressed
        // Instead of having the click the enter button, user could simply press enter key on their keyboard for convenience, below codes are copied from the enter button action performed method
      
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            
            btnEnter.setEnabled(false);//disable the button when it is pressed to prevent error
            btnEnter.setForeground(Color.BLUE);
            String steal;
            userAnswer = txtUserAnswer.getText();//get the user input 
            lblQuestion.setText("Question Selected:");
            txtUserAnswer.setText("");
           
            if (checkAnswer()) {//check if answer is correct using the checkAnswer method
                
                if (player == 1) {//to whoever the question belongs to
                    
                    txtUserAnswer.setText("That's correct! You just won $" + (questionRow + 1) * 100 + " dollars!");//tell user they are corect
                    txtUserAnswer.setEnabled(false);
                    player1Score += (questionRow + 1) * 100;//add points to the point track
                    lblP1Money.setText("P1: $" + player1Score);//update the scoreboard
                    player = 2;
                } else {//same for player2
                    
                    txtUserAnswer.setText("That's correct! You just won $" + (questionRow + 1) * 100 + " dollars!");//tell user they are corect
                    txtUserAnswer.setEnabled(false);
                    player2Score += (questionRow + 1) * 100;//add points to the point track
                    lblP2Money.setText("P2: $" + player2Score);//update the scoreboard
                    player = 1;

                }
                
                arrC.add(questionColumn);
                arrR.add(questionRow);
                theQuestionButtons[questionColumn][questionRow].setEnabled(false);//disable that question so users cant choose it again
                
            } else {
                
                txtUserAnswer.setText("Sorry that's the incorrect answer. You lost $" + (questionRow + 1) * 100 + " dollars.");//tell user that their answer is incorrect   
                
                if (player == 1) {
                    
                    player1Score -= (questionRow + 1) * 100;//beacuse the user got the wrong answer, the amount the point the question's worth is deducted from the user
                    lblP1Money.setText("P1: $" + player1Score);//udpate scoreboard
                    player = 2;//next player
                    
                    if (!answeredTwice) {
                        
                        steal = JOptionPane.showInputDialog("Player: " + player + " would you like to steal this question?(If you enter no the question will"//ask whether the other user wants to steal
                                + " disappear)");
                        
                        if (steal != null && steal.equalsIgnoreCase("yes")) {//if yes, repeat the process above, except that the answeredTwice variable will be set to true.
                            answeredTwice = true;//set to true beacuse we only want a question to get answered twice
                            lblQuestion.setText("Question Selected: " + question + "?");//set label
                            txtUserAnswer.setText("");
                            btnEnter.setEnabled(true);//enable enter buton
                            btnEnter.setBackground(Color.BLUE);//set enter button color
                            btnEnter.setForeground(Color.YELLOW);
                            for (int i = 0; i < 4; i++) {
                                for (int j = 0; j < 4; j++) {
                                    theQuestionButtons[i][j].setEnabled(false);
                                }
                            }
                            
                        } else {//disable the question if the other player doesn't want to steal
                            theQuestionButtons[questionColumn][questionRow].setEnabled(false);
                            txtUserAnswer.setEnabled(false);
                            txtUserAnswer.setText("");
                            arrC.add(questionColumn);
                            arrR.add(questionRow);
                        }
                        
                    } else {
                        
                        theQuestionButtons[questionColumn][questionRow].setEnabled(false);//disable the button if the question is answered twice
                        txtUserAnswer.setEnabled(false);
                        arrC.add(questionColumn);
                        arrR.add(questionRow);
                        
                        for (int i = 0; i < 4; i++) {
                            for (int j = 0; j < 4; j++) {
                                theQuestionButtons[i][j].setEnabled(true);
                            }
                        }
                        
                        for (int i = 0; i < arrC.size(); i++) {
                            theQuestionButtons[arrC.get(i)][arrR.get(i)].setEnabled(false);
                        }
                    }
                    
                } else {//same for player2
                    
                    player2Score -= (questionRow + 1) * 100;//beacuse the user got the wrong answer, the amount the point the question's worth is deducted from the user
                    lblP2Money.setText("P2: $" + player2Score);//udpate scoreboard
                    player = 1;//next player
                    
                    if (!answeredTwice) {
                        
                        steal = JOptionPane.showInputDialog("Player: " + player + " would you like to steal this question?(If you enter no the question will"
                                + " disappear)");
                        
                        if (steal != null && steal.equalsIgnoreCase("yes")) {
                            
                            answeredTwice = true;
                            lblQuestion.setText("Question Selected: " + question + "?");
                            txtUserAnswer.setText("");
                            btnEnter.setEnabled(true);//enable enter buton
                            btnEnter.setBackground(Color.BLUE);//set enter button color
                            btnEnter.setForeground(Color.YELLOW);
                            for (int i = 0; i < 4; i++) {
                                for (int j = 0; j < 4; j++) {
                                    theQuestionButtons[i][j].setEnabled(false);
                                }
                            }
                            
                        } else {//disable the question if the other player doesn't want to steal
                            
                            theQuestionButtons[questionColumn][questionRow].setEnabled(false);
                            txtUserAnswer.setEnabled(false);
                            txtUserAnswer.setText("");
                            arrC.add(questionColumn);
                            arrR.add(questionRow);
                        }
                    } else {
                        
                        theQuestionButtons[questionColumn][questionRow].setEnabled(false);//disable the button if the question is answered twice
                        txtUserAnswer.setEnabled(false);
                        arrC.add(questionColumn);
                        arrR.add(questionRow);
                        for (int i = 0; i < 4; i++) {
                            for (int j = 0; j < 4; j++) {
                                theQuestionButtons[i][j].setEnabled(true);
                            }
                        }
                        for (int i = 0; i < arrC.size(); i++) {
                            theQuestionButtons[arrC.get(i)][arrR.get(i)].setEnabled(false);
                        }
                    }
                }
            }

            if (arrC.size() == 16) {//use the winScreen method to check if the game should end
                winScreen();
            }
            if (player == 1) {//set the color of the label based on the player
                lblCurrentPlayer.setForeground(Color.RED);
            } else {
                lblCurrentPlayer.setForeground(Color.BLUE);
            }
            lblCurrentPlayer.setText("Player" + player + "'s turn");//show whose turn it is
        }
    }//GEN-LAST:event_txtUserAnswerKeyPressed

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1KeyPressed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Group7Jeoprady.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Group7Jeoprady.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Group7Jeoprady.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Group7Jeoprady.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Group7Jeoprady().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardPanel;
    private javax.swing.JButton btnC1;
    private javax.swing.JButton btnC2;
    private javax.swing.JButton btnC3;
    private javax.swing.JButton btnC4;
    private javax.swing.JButton btnEndGame;
    private javax.swing.JButton btnEnter;
    private javax.swing.JButton btnH1;
    private javax.swing.JButton btnH2;
    private javax.swing.JButton btnH3;
    private javax.swing.JButton btnH4;
    private javax.swing.JButton btnM1;
    private javax.swing.JButton btnM2;
    private javax.swing.JButton btnM3;
    private javax.swing.JButton btnM4;
    private javax.swing.JButton btnRestart;
    private javax.swing.JButton btnRestart1;
    private javax.swing.JButton btnS1;
    private javax.swing.JButton btnS2;
    private javax.swing.JButton btnS3;
    private javax.swing.JButton btnS4;
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel coverPicture;
    private javax.swing.JPanel defaultPanel;
    private javax.swing.JPanel gameOverPanel;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCredits;
    private javax.swing.JLabel lblCurrentPlayer;
    private javax.swing.JLabel lblGameOver;
    private javax.swing.JLabel lblHighScore;
    private javax.swing.JLabel lblP1Money;
    private javax.swing.JLabel lblP2Money;
    private javax.swing.JLabel lblQuestion;
    private javax.swing.JLabel lblTital;
    private javax.swing.JLabel lblWinner;
    private javax.swing.JPanel startPanel;
    private javax.swing.JTextField txtUserAnswer;
    // End of variables declaration//GEN-END:variables
}
